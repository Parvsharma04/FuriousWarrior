generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum Category {
  DOCUMENT
  SERVICE
  CONSULTANCY
  TRAINING
  PRODUCT
  ADVERTISING
}

enum Activity {
  LOGIN
  SIGNUP
  VISIT
}

model User {
  user_id        Int                @id @default(autoincrement())
  user_role      UserRole           @default(USER)
  full_name      String
  email          String             @unique
  phone_number   String
  password_hash  String
  signup_date    DateTime           @default(now())
  activities     UserActivity[]
  downloads      DocumentDownload[]
  cartActivities CartActivity[]
  orders         Order[]
  invoices       Invoice[]
}

model UserActivity {
  activity_id   Int      @id @default(autoincrement())
  user          User     @relation(fields: [user_id], references: [user_id])
  user_id       Int
  activity_type Activity
  activity_time DateTime @default(now())
}

model DocumentDownload {
  download_id   Int      @id @default(autoincrement())
  user          User     @relation(fields: [user_id], references: [user_id])
  user_id       Int
  document      Document @relation(fields: [document_id], references: [document_id])
  document_id   Int
  download_time DateTime @default(now())
}

model Document {
  document_id    Int                @id @default(autoincrement())
  title          String
  description    String
  price          Float
  upload_date    DateTime           @default(now())
  download_limit Int
  downloads      DocumentDownload[]
  products       Product[]
}

model CartActivity {
  cart_activity_id   Int       @id @default(autoincrement())
  user               User      @relation(fields: [user_id], references: [user_id])
  user_id            Int
  item               Product   @relation(fields: [item_id], references: [item_id])
  item_id            Int
  added_to_cart_time DateTime  @default(now())
  checked_out        Boolean
  checkout_time      DateTime?
}

model Product {
  item_id         Int            @id @default(autoincrement())
  title           String
  description     String
  price           Float
  category        Category
  available_stock Int
  file            Document?      @relation(fields: [document_id], references: [document_id])
  document_id     Int?
  cartActivities  CartActivity[]
  orderItems      OrderItem[]
  downloads       Int? // Optional field for products with limited downloads
  seo_meta_data   Json? // Optional SEO data
}

model OrderItem {
  order_item_id Int     @id @default(autoincrement())
  order         Order   @relation(fields: [order_id], references: [order_id])
  order_id      Int
  product       Product @relation(fields: [product_id], references: [item_id])
  product_id    Int
  quantity      Int
  price         Float // Price at the time of purchase
}

model Order {
  order_id       Int         @id @default(autoincrement())
  user           User        @relation(fields: [user_id], references: [user_id])
  user_id        Int
  order_date     DateTime    @default(now())
  total_amount   Float
  payment_status String
  invoice        Invoice?
  items          OrderItem[]
  coupon         Coupon?     @relation(fields: [coupon_id], references: [coupon_id])
  coupon_id      Int?
}

model Invoice {
  invoice_id     Int      @id @default(autoincrement())
  order          Order    @relation(fields: [order_id], references: [order_id])
  order_id       Int      @unique
  user           User     @relation(fields: [user_id], references: [user_id])
  user_id        Int
  generated_date DateTime @default(now())
}

model AnalyticsReport {
  report_id      Int      @id @default(autoincrement())
  report_type    String
  generated_time DateTime @default(now())
  data           Json
}

model Coupon {
  coupon_id        Int      @id @default(autoincrement())
  code             String   @unique
  discount_amount  Float
  discount_percent Float?
  start_date       DateTime
  end_date         DateTime
  max_uses         Int
  times_used       Int      @default(0)
  orders           Order[]
}
